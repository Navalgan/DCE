{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyReleased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoIncome",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_id",
          "type": "uint256"
        }
      ],
      "name": "NotApprovedForPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceMustBeTheSame",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "EthProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NftsBuy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NftsSell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        }
      ],
      "name": "PoolClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price_per_nft",
          "type": "uint256"
        }
      ],
      "name": "PoolPrice",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BuyNfts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        }
      ],
      "name": "ClosePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nft_token_ids",
          "type": "uint256[]"
        }
      ],
      "name": "CreatePool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nft_token_ids",
          "type": "uint256[]"
        }
      ],
      "name": "SellNfts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "buy",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9475141216e36cfc813d2e420748d2af3aca0abc85bac51184316a10c539cf8f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1970551",
    "logsBloom": "0x
    "blockHash": "0xe31903880ce1f7c0961dbdefa0e35e28d8fd87ee700c307553cc8cba5e59d62f",
    "transactionHash": "0x9475141216e36cfc813d2e420748d2af3aca0abc85bac51184316a10c539cf8f",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1970551",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ea01fac3c1e91b416a222ff9dbdb237b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyReleased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoIncome\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_id\",\"type\":\"uint256\"}],\"name\":\"NotApprovedForPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceMustBeTheSame\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"EthProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NftsBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NftsSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"}],\"name\":\"PoolClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price_per_nft\",\"type\":\"uint256\"}],\"name\":\"PoolPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyNfts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"}],\"name\":\"ClosePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nft_token_ids\",\"type\":\"uint256[]\"}],\"name\":\"CreatePool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nft_token_ids\",\"type\":\"uint256[]\"}],\"name\":\"SellNfts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// send NFTs\\n// wait for eth\\n// create pool\\n// one persone gives nfts\\n\\nerror PriceMustBeAboveZero();\\nerror NotApprovedForPool(uint256 nft_id);\\nerror NotOwner();\\nerror NotEnoughEth();\\nerror NotEnoughNfts();\\nerror AlreadyProvided();\\nerror AlreadyReleased();\\nerror NoIncome();\\nerror PriceMustBeTheSame();\\n\\ncontract LiquidityPool is ReentrancyGuard {\\n    event PoolCreated(\\n        address seller,\\n        address nft_address,\\n        uint256 nft_amount,\\n        uint256 eth_amount\\n    );\\n    event PoolClosed(address nft_address);\\n    event EthProvided(address nft_address, address provider);\\n    event PoolPrice(address nft_address, uint256 price_per_nft);\\n    event NftsBuy(address nft_address, uint256 amount);\\n    event NftsSell(address nft_address, uint256 amount);\\n\\n    struct Pool {\\n        address pool_creator;\\n        address nft_adderess;\\n        uint256[] nft_token_ids;\\n        uint256 eth_amount;\\n        bool released;\\n    }\\n\\n    mapping(address => Pool) private pools;\\n    mapping(address => uint256) private earned;\\n\\n    ////////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////// Modifiers ///////////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////////\\n\\n    modifier isApproved(address nft_address, uint256[] calldata nft_token_ids) {\\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\\n            if (\\n                IERC721(nft_address).getApproved(nft_token_ids[i]) !=\\n                address(this)\\n            ) {\\n                revert NotApprovedForPool(nft_token_ids[i]);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier isOwned(\\n        address nft_address,\\n        uint256[] calldata nft_token_ids,\\n        address spender\\n    ) {\\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\\n            if (IERC721(nft_address).ownerOf(nft_token_ids[i]) != spender) {\\n                revert NotOwner();\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier isReleased(address nft_address) {\\n        if (!pools[nft_address].released) {\\n            revert AlreadyReleased();\\n        }\\n        _;\\n    }\\n\\n    modifier notReleased(address nft_address) {\\n        if (pools[nft_address].released) {\\n            revert AlreadyReleased();\\n        }\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////// Main Functions //////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////////\\n\\n    function CreatePool(\\n        address nft_address,\\n        uint256[] calldata nft_token_ids\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        notReleased(nft_address)\\n        isApproved(nft_address, nft_token_ids)\\n        isOwned(nft_address, nft_token_ids, msg.sender)\\n    {\\n        if (msg.value <= 0 || msg.value / nft_token_ids.length == 0) {\\n            revert PriceMustBeAboveZero();\\n        }\\n        if (\\n            (msg.value / nft_token_ids.length) * nft_token_ids.length !=\\n            msg.value\\n        ) {\\n            revert PriceMustBeTheSame();\\n        }\\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\\n            IERC721(nft_address).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                nft_token_ids[i]\\n            );\\n        }\\n        pools[nft_address] = Pool(\\n            msg.sender,\\n            nft_address,\\n            nft_token_ids,\\n            msg.value,\\n            true\\n        );\\n        emit PoolCreated(\\n            msg.sender,\\n            nft_address,\\n            nft_token_ids.length,\\n            msg.value\\n        );\\n    }\\n\\n    function ClosePool(\\n        address nft_address\\n    ) external nonReentrant isReleased(nft_address) {\\n        delete pools[nft_address];\\n        for (uint256 i = 0; i < pools[nft_address].nft_token_ids.length; i++) {\\n            IERC721(nft_address).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                pools[nft_address].nft_token_ids[i]\\n            );\\n        }\\n        (bool success, ) = payable(msg.sender).call{\\n            value: pools[nft_address].eth_amount\\n        }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit PoolClosed(nft_address);\\n    }\\n\\n    function BuyNfts(\\n        address nft_address,\\n        uint256 amount\\n    ) external payable nonReentrant isReleased(nft_address) {\\n        uint256 price = RecalculatePrice(nft_address, amount, true);\\n        if (msg.value < price + totalCommission(price)) {\\n            revert NotEnoughEth();\\n        }\\n        returnExtraMoney(msg.sender, price + totalCommission(price), msg.value);\\n        pools[nft_address].eth_amount += price;\\n        for (uint256 i = 0; i < amount; i++) {\\n            uint256 len = pools[nft_address].nft_token_ids.length - 1;\\n            IERC721(nft_address).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                pools[nft_address].nft_token_ids[len]\\n            );\\n            pools[nft_address].nft_token_ids.pop();\\n        }\\n        pools[nft_address].eth_amount += price;\\n\\n        sendCommision(pools[nft_address].pool_creator, price);\\n        emit NftsBuy(nft_address, amount);\\n    }\\n\\n    function SellNfts(\\n        address nft_address,\\n        uint256[] calldata nft_token_ids\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isReleased(nft_address)\\n        isApproved(nft_address, nft_token_ids)\\n        isOwned(nft_address, nft_token_ids, msg.sender)\\n    {\\n        uint256 price = RecalculatePrice(\\n            nft_address,\\n            nft_token_ids.length,\\n            false\\n        );\\n        if (msg.value < totalCommission(price)) {\\n            revert NotEnoughEth();\\n        }\\n        returnExtraMoney(msg.sender, totalCommission(price), msg.value);\\n\\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\\n            IERC721(nft_address).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                nft_token_ids[i]\\n            );\\n            pools[nft_address].nft_token_ids.push(nft_token_ids[i]);\\n        }\\n        (bool success, ) = payable(msg.sender).call{value: price}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        sendCommision(pools[nft_address].pool_creator, price);\\n        emit NftsSell(nft_address, nft_token_ids.length);\\n    }\\n\\n    function withdrawProceeds() external nonReentrant {\\n        uint256 income = earned[msg.sender];\\n        if (income <= 0) {\\n            revert NoIncome();\\n        }\\n        earned[msg.sender] = 0;\\n        (bool success, ) = payable(msg.sender).call{value: income}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function getBalance(address user) external view returns (uint256) {\\n        return earned[user];\\n    }\\n\\n    function getPrice(\\n        address nft_address,\\n        uint256 amount,\\n        bool buy\\n    ) external view returns (uint256) {\\n        uint256 price = RecalculatePrice(nft_address, amount, buy);\\n        return price + totalCommission(price);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////\\n    ////////////////////////////// Help Functions //////////////////////////////////////\\n    ////////////////////////////////////////////////////////////////////////////////////\\n\\n    function RecalculatePrice(\\n        address nft_address,\\n        uint256 dn,\\n        bool buy\\n    ) private view returns (uint256) {\\n        uint256 n = pools[nft_address].nft_token_ids.length;\\n        uint256 k = pools[nft_address].eth_amount;\\n        if (buy) {\\n            return (k * dn) / (n - dn);\\n        }\\n        return (k * dn) / (n + dn);\\n    }\\n\\n    function totalCommission(\\n        uint256 total_price\\n    ) private pure returns (uint256) {\\n        return total_price / 400;\\n    }\\n\\n    function poolCommission(\\n        uint256 total_price\\n    ) private pure returns (uint256) {\\n        return totalCommission(total_price) / 2;\\n    }\\n\\n    function returnExtraMoney(\\n        address sender,\\n        uint256 required,\\n        uint256 got\\n    ) private nonReentrant {\\n        if (got > required) {\\n            (bool success, ) = payable(sender).call{value: got - required}(\\\"\\\");\\n            require(success, \\\"Extra money returning failed\\\");\\n        }\\n    }\\n\\n    function sendCommision(address pool_creator, uint256 price) private {\\n        earned[pool_creator] += poolCommission(price);\\n        earned[address(this)] += totalCommission(price) - poolCommission(price);\\n    }\\n}\\n\",\"keccak256\":\"0x581555dd215e14f31df2d32b9f51e4b58c181fc1ccf90da05d572b9cfc2ebda0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061226c806100286000396000f3fe6080604052600436106100705760003560e01c80639038e6931161004e5780639038e693146100ea578063d168688b14610101578063d28b6c841461012a578063f8b2cb4f1461014657610070565b80630e8ea80f14610075578063170e0c29146100915780637fece368146100ad575b600080fd5b61008f600480360381019061008a9190611bc4565b610183565b005b6100ab60048036038101906100a69190611c69565b61059c565b005b3480156100b957600080fd5b506100d460048036038101906100cf9190611d01565b610b87565b6040516100e19190611d63565b60405180910390f35b3480156100f657600080fd5b506100ff610bb5565b005b34801561010d57600080fd5b5061012860048036038101906101239190611d7e565b610d38565b005b610144600480360381019061013f9190611c69565b6110e6565b005b34801561015257600080fd5b5061016d60048036038101906101689190611d7e565b61172a565b60405161017a9190611d63565b60405180910390f35b61018b611773565b81600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610212576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610220848460016117c2565b905061022b816118b3565b816102369190611dda565b34101561026f576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028d3361027c836118b3565b836102879190611dda565b346118ca565b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546102df9190611dda565b9250508190555060005b8381101561048f57600060018060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805490506103449190611e0e565b90508573ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020185815481106103b8576103b7611e42565b5b90600052602060002001546040518463ffffffff1660e01b81526004016103e193929190611e80565b600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180548061046557610464611eb7565b5b6001900381819060005260206000200160009055905550808061048790611ee6565b9150506102e9565b5080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546104e29190611dda565b92505081905550610555600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826119a0565b7fbc34889a0bb67c45539b52a26431dca393d0bc20d8b187eea1aba1740761cd528484604051610586929190611f2e565b60405180910390a15050610598611a73565b5050565b6105a4611773565b82600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661062b576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360005b8282905081101561076a573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc85858581811061068257610681611e42565b5b905060200201356040518263ffffffff1660e01b81526004016106a59190611d63565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146107575782828281811061071457610713611e42565b5b905060200201356040517fb914872600000000000000000000000000000000000000000000000000000000815260040161074e9190611d63565b60405180910390fd5b808061076290611ee6565b915050610631565b508686863360005b83839050811015610887578173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e8686858181106107c3576107c2611e42565b5b905060200201356040518263ffffffff1660e01b81526004016107e69190611d63565b602060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108279190611f6c565b73ffffffffffffffffffffffffffffffffffffffff1614610874576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061087f90611ee6565b915050610772565b5060006108998c8c8c905060006117c2565b90506108a4816118b3565b3410156108dd576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f0336108ea836118b3565b346118ca565b60005b8b8b9050811015610a1b578c73ffffffffffffffffffffffffffffffffffffffff166342842e0e33308f8f8681811061092f5761092e611e42565b5b905060200201356040518463ffffffff1660e01b815260040161095493929190611e80565b600060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b50505050600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c8c838181106109db576109da611e42565b5b9050602002013590806001815401808255809150506001900390600052602060002001600090919091909150558080610a1390611ee6565b9150506108f3565b5060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a4290611fca565b60006040518083038185875af1925050503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5050905080610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf9061203c565b60405180910390fd5b610b34600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836119a0565b7f07a418268850105348fbdc299a53df89d86785a51ab2076218aefe68ce84ee198d8d8d9050604051610b68929190611f2e565b60405180910390a150505050505050505050610b82611a73565b505050565b600080610b958585856117c2565b9050610ba0816118b3565b81610bab9190611dda565b9150509392505050565b610bbd611773565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610c3b576040517feafead5500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610ca690611fca565b60006040518083038185875af1925050503d8060008114610ce3576040519150601f19603f3d011682016040523d82523d6000602084013e610ce8565b606091505b5050905080610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d239061203c565b60405180910390fd5b5050610d36611a73565b565b610d40611773565b80600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610dc7576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610e659190611a9b565b60038201600090556004820160006101000a81549060ff0219169055505060005b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180549050811015610fb3578273ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018581548110610f4557610f44611e42565b5b90600052602060002001546040518463ffffffff1660e01b8152600401610f6e93929190611e80565b600060405180830381600087803b158015610f8857600080fd5b505af1158015610f9c573d6000803e3d6000fd5b505050508080610fab90611ee6565b915050610e86565b5060003373ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015460405161101c90611fca565b60006040518083038185875af1925050503d8060008114611059576040519150601f19603f3d011682016040523d82523d6000602084013e61105e565b606091505b50509050806110a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110999061203c565b60405180910390fd5b7ff1383fae38496fbd762ff89e13d06a604cda9e6beb4468c69fb8608718819a5a836040516110d1919061205c565b60405180910390a150506110e3611a73565b50565b6110ee611773565b82600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615611176576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360005b828290508110156112b5573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc8585858181106111cd576111cc611e42565b5b905060200201356040518263ffffffff1660e01b81526004016111f09190611d63565b602060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146112a25782828281811061125f5761125e611e42565b5b905060200201356040517fb91487260000000000000000000000000000000000000000000000000000000081526004016112999190611d63565b60405180910390fd5b80806112ad90611ee6565b91505061117c565b508686863360005b838390508110156113d2578173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e86868581811061130e5761130d611e42565b5b905060200201356040518263ffffffff1660e01b81526004016113319190611d63565b602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146113bf576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80806113ca90611ee6565b9150506112bd565b506000341115806113f1575060008a8a9050346113ef91906120a6565b145b15611428576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348a8a90508b8b90503461143c91906120a6565b61144691906120d7565b1461147d576040517fe0e4c38a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8a8a9050811015611526578b73ffffffffffffffffffffffffffffffffffffffff166342842e0e33308e8e868181106114bc576114bb611e42565b5b905060200201356040518463ffffffff1660e01b81526004016114e193929190611e80565b600060405180830381600087803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b50505050808061151e90611ee6565b915050611480565b506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815260200134815260200160011515815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906116a7929190611abc565b506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050507fd569a23a8cff45c641c5d5e4fb55b5e15e918f9acf0fc42b4909adc31f5f806c338c8c8c90503460405161170d9493929190612119565b60405180910390a15050505050505050611725611a73565b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6002600054036117b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117af906121aa565b60405180910390fd5b6002600081905550565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054905090506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905083156118855784826118669190611e0e565b858261187291906120d7565b61187c91906120a6565b925050506118ac565b84826118919190611dda565b858261189d91906120d7565b6118a791906120a6565b925050505b9392505050565b6000610190826118c391906120a6565b9050919050565b6118d2611773565b818111156119935760008373ffffffffffffffffffffffffffffffffffffffff1683836118ff9190611e0e565b60405161190b90611fca565b60006040518083038185875af1925050503d8060008114611948576040519150601f19603f3d011682016040523d82523d6000602084013e61194d565b606091505b5050905080611991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198890612216565b60405180910390fd5b505b61199b611a73565b505050565b6119a981611a7d565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119f79190611dda565b92505081905550611a0781611a7d565b611a10826118b3565b611a1a9190611e0e565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a689190611dda565b925050819055505050565b6001600081905550565b60006002611a8a836118b3565b611a9491906120a6565b9050919050565b5080546000825590600052602060002090810190611ab99190611b09565b50565b828054828255906000526020600020908101928215611af8579160200282015b82811115611af7578251825591602001919060010190611adc565b5b509050611b059190611b09565b5090565b5b80821115611b22576000816000905550600101611b0a565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5b82611b30565b9050919050565b611b6b81611b50565b8114611b7657600080fd5b50565b600081359050611b8881611b62565b92915050565b6000819050919050565b611ba181611b8e565b8114611bac57600080fd5b50565b600081359050611bbe81611b98565b92915050565b60008060408385031215611bdb57611bda611b26565b5b6000611be985828601611b79565b9250506020611bfa85828601611baf565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c2957611c28611c04565b5b8235905067ffffffffffffffff811115611c4657611c45611c09565b5b602083019150836020820283011115611c6257611c61611c0e565b5b9250929050565b600080600060408486031215611c8257611c81611b26565b5b6000611c9086828701611b79565b935050602084013567ffffffffffffffff811115611cb157611cb0611b2b565b5b611cbd86828701611c13565b92509250509250925092565b60008115159050919050565b611cde81611cc9565b8114611ce957600080fd5b50565b600081359050611cfb81611cd5565b92915050565b600080600060608486031215611d1a57611d19611b26565b5b6000611d2886828701611b79565b9350506020611d3986828701611baf565b9250506040611d4a86828701611cec565b9150509250925092565b611d5d81611b8e565b82525050565b6000602082019050611d786000830184611d54565b92915050565b600060208284031215611d9457611d93611b26565b5b6000611da284828501611b79565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611de582611b8e565b9150611df083611b8e565b9250828201905080821115611e0857611e07611dab565b5b92915050565b6000611e1982611b8e565b9150611e2483611b8e565b9250828203905081811115611e3c57611e3b611dab565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b611e7a81611b50565b82525050565b6000606082019050611e956000830186611e71565b611ea26020830185611e71565b611eaf6040830184611d54565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000611ef182611b8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f2357611f22611dab565b5b600182019050919050565b6000604082019050611f436000830185611e71565b611f506020830184611d54565b9392505050565b600081519050611f6681611b62565b92915050565b600060208284031215611f8257611f81611b26565b5b6000611f9084828501611f57565b91505092915050565b600081905092915050565b50565b6000611fb4600083611f99565b9150611fbf82611fa4565b600082019050919050565b6000611fd582611fa7565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612026600f83611fdf565b915061203182611ff0565b602082019050919050565b6000602082019050818103600083015261205581612019565b9050919050565b60006020820190506120716000830184611e71565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120b182611b8e565b91506120bc83611b8e565b9250826120cc576120cb612077565b5b828204905092915050565b60006120e282611b8e565b91506120ed83611b8e565b92508282026120fb81611b8e565b9150828204841483151761211257612111611dab565b5b5092915050565b600060808201905061212e6000830187611e71565b61213b6020830186611e71565b6121486040830185611d54565b6121556060830184611d54565b95945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612194601f83611fdf565b915061219f8261215e565b602082019050919050565b600060208201905081810360008301526121c381612187565b9050919050565b7f4578747261206d6f6e65792072657475726e696e67206661696c656400000000600082015250565b6000612200601c83611fdf565b915061220b826121ca565b602082019050919050565b6000602082019050818103600083015261222f816121f3565b905091905056fea264697066735822122083863bb1e2f86299d6fa6c705158f6cc6ad941703f576f009e705defa2ce85d164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80639038e6931161004e5780639038e693146100ea578063d168688b14610101578063d28b6c841461012a578063f8b2cb4f1461014657610070565b80630e8ea80f14610075578063170e0c29146100915780637fece368146100ad575b600080fd5b61008f600480360381019061008a9190611bc4565b610183565b005b6100ab60048036038101906100a69190611c69565b61059c565b005b3480156100b957600080fd5b506100d460048036038101906100cf9190611d01565b610b87565b6040516100e19190611d63565b60405180910390f35b3480156100f657600080fd5b506100ff610bb5565b005b34801561010d57600080fd5b5061012860048036038101906101239190611d7e565b610d38565b005b610144600480360381019061013f9190611c69565b6110e6565b005b34801561015257600080fd5b5061016d60048036038101906101689190611d7e565b61172a565b60405161017a9190611d63565b60405180910390f35b61018b611773565b81600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610212576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610220848460016117c2565b905061022b816118b3565b816102369190611dda565b34101561026f576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028d3361027c836118b3565b836102879190611dda565b346118ca565b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546102df9190611dda565b9250508190555060005b8381101561048f57600060018060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805490506103449190611e0e565b90508573ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020185815481106103b8576103b7611e42565b5b90600052602060002001546040518463ffffffff1660e01b81526004016103e193929190611e80565b600060405180830381600087803b1580156103fb57600080fd5b505af115801561040f573d6000803e3d6000fd5b50505050600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180548061046557610464611eb7565b5b6001900381819060005260206000200160009055905550808061048790611ee6565b9150506102e9565b5080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546104e29190611dda565b92505081905550610555600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826119a0565b7fbc34889a0bb67c45539b52a26431dca393d0bc20d8b187eea1aba1740761cd528484604051610586929190611f2e565b60405180910390a15050610598611a73565b5050565b6105a4611773565b82600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1661062b576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360005b8282905081101561076a573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc85858581811061068257610681611e42565b5b905060200201356040518263ffffffff1660e01b81526004016106a59190611d63565b602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146107575782828281811061071457610713611e42565b5b905060200201356040517fb914872600000000000000000000000000000000000000000000000000000000815260040161074e9190611d63565b60405180910390fd5b808061076290611ee6565b915050610631565b508686863360005b83839050811015610887578173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e8686858181106107c3576107c2611e42565b5b905060200201356040518263ffffffff1660e01b81526004016107e69190611d63565b602060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108279190611f6c565b73ffffffffffffffffffffffffffffffffffffffff1614610874576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061087f90611ee6565b915050610772565b5060006108998c8c8c905060006117c2565b90506108a4816118b3565b3410156108dd576040517ff14a42b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108f0336108ea836118b3565b346118ca565b60005b8b8b9050811015610a1b578c73ffffffffffffffffffffffffffffffffffffffff166342842e0e33308f8f8681811061092f5761092e611e42565b5b905060200201356040518463ffffffff1660e01b815260040161095493929190611e80565b600060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b50505050600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018c8c838181106109db576109da611e42565b5b9050602002013590806001815401808255809150506001900390600052602060002001600090919091909150558080610a1390611ee6565b9150506108f3565b5060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a4290611fca565b60006040518083038185875af1925050503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5050905080610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abf9061203c565b60405180910390fd5b610b34600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836119a0565b7f07a418268850105348fbdc299a53df89d86785a51ab2076218aefe68ce84ee198d8d8d9050604051610b68929190611f2e565b60405180910390a150505050505050505050610b82611a73565b505050565b600080610b958585856117c2565b9050610ba0816118b3565b81610bab9190611dda565b9150509392505050565b610bbd611773565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610c3b576040517feafead5500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610ca690611fca565b60006040518083038185875af1925050503d8060008114610ce3576040519150601f19603f3d011682016040523d82523d6000602084013e610ce8565b606091505b5050905080610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d239061203c565b60405180910390fd5b5050610d36611a73565b565b610d40611773565b80600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16610dc7576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000610e659190611a9b565b60038201600090556004820160006101000a81549060ff0219169055505060005b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180549050811015610fb3578273ffffffffffffffffffffffffffffffffffffffff166342842e0e3033600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018581548110610f4557610f44611e42565b5b90600052602060002001546040518463ffffffff1660e01b8152600401610f6e93929190611e80565b600060405180830381600087803b158015610f8857600080fd5b505af1158015610f9c573d6000803e3d6000fd5b505050508080610fab90611ee6565b915050610e86565b5060003373ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015460405161101c90611fca565b60006040518083038185875af1925050503d8060008114611059576040519150601f19603f3d011682016040523d82523d6000602084013e61105e565b606091505b50509050806110a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110999061203c565b60405180910390fd5b7ff1383fae38496fbd762ff89e13d06a604cda9e6beb4468c69fb8608718819a5a836040516110d1919061205c565b60405180910390a150506110e3611a73565b50565b6110ee611773565b82600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615611176576040517f63b4904e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83838360005b828290508110156112b5573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663081812fc8585858181106111cd576111cc611e42565b5b905060200201356040518263ffffffff1660e01b81526004016111f09190611d63565b602060405180830381865afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112319190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146112a25782828281811061125f5761125e611e42565b5b905060200201356040517fb91487260000000000000000000000000000000000000000000000000000000081526004016112999190611d63565b60405180910390fd5b80806112ad90611ee6565b91505061117c565b508686863360005b838390508110156113d2578173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e86868581811061130e5761130d611e42565b5b905060200201356040518263ffffffff1660e01b81526004016113319190611d63565b602060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190611f6c565b73ffffffffffffffffffffffffffffffffffffffff16146113bf576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80806113ca90611ee6565b9150506112bd565b506000341115806113f1575060008a8a9050346113ef91906120a6565b145b15611428576040517fe1abbfc500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b348a8a90508b8b90503461143c91906120a6565b61144691906120d7565b1461147d576040517fe0e4c38a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8a8a9050811015611526578b73ffffffffffffffffffffffffffffffffffffffff166342842e0e33308e8e868181106114bc576114bb611e42565b5b905060200201356040518463ffffffff1660e01b81526004016114e193929190611e80565b600060405180830381600087803b1580156114fb57600080fd5b505af115801561150f573d6000803e3d6000fd5b50505050808061151e90611ee6565b915050611480565b506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815260200134815260200160011515815250600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906116a7929190611abc565b506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050507fd569a23a8cff45c641c5d5e4fb55b5e15e918f9acf0fc42b4909adc31f5f806c338c8c8c90503460405161170d9493929190612119565b60405180910390a15050505050505050611725611a73565b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6002600054036117b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117af906121aa565b60405180910390fd5b6002600081905550565b600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054905090506000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154905083156118855784826118669190611e0e565b858261187291906120d7565b61187c91906120a6565b925050506118ac565b84826118919190611dda565b858261189d91906120d7565b6118a791906120a6565b925050505b9392505050565b6000610190826118c391906120a6565b9050919050565b6118d2611773565b818111156119935760008373ffffffffffffffffffffffffffffffffffffffff1683836118ff9190611e0e565b60405161190b90611fca565b60006040518083038185875af1925050503d8060008114611948576040519150601f19603f3d011682016040523d82523d6000602084013e61194d565b606091505b5050905080611991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198890612216565b60405180910390fd5b505b61199b611a73565b505050565b6119a981611a7d565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119f79190611dda565b92505081905550611a0781611a7d565b611a10826118b3565b611a1a9190611e0e565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a689190611dda565b925050819055505050565b6001600081905550565b60006002611a8a836118b3565b611a9491906120a6565b9050919050565b5080546000825590600052602060002090810190611ab99190611b09565b50565b828054828255906000526020600020908101928215611af8579160200282015b82811115611af7578251825591602001919060010190611adc565b5b509050611b059190611b09565b5090565b5b80821115611b22576000816000905550600101611b0a565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5b82611b30565b9050919050565b611b6b81611b50565b8114611b7657600080fd5b50565b600081359050611b8881611b62565b92915050565b6000819050919050565b611ba181611b8e565b8114611bac57600080fd5b50565b600081359050611bbe81611b98565b92915050565b60008060408385031215611bdb57611bda611b26565b5b6000611be985828601611b79565b9250506020611bfa85828601611baf565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c2957611c28611c04565b5b8235905067ffffffffffffffff811115611c4657611c45611c09565b5b602083019150836020820283011115611c6257611c61611c0e565b5b9250929050565b600080600060408486031215611c8257611c81611b26565b5b6000611c9086828701611b79565b935050602084013567ffffffffffffffff811115611cb157611cb0611b2b565b5b611cbd86828701611c13565b92509250509250925092565b60008115159050919050565b611cde81611cc9565b8114611ce957600080fd5b50565b600081359050611cfb81611cd5565b92915050565b600080600060608486031215611d1a57611d19611b26565b5b6000611d2886828701611b79565b9350506020611d3986828701611baf565b9250506040611d4a86828701611cec565b9150509250925092565b611d5d81611b8e565b82525050565b6000602082019050611d786000830184611d54565b92915050565b600060208284031215611d9457611d93611b26565b5b6000611da284828501611b79565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611de582611b8e565b9150611df083611b8e565b9250828201905080821115611e0857611e07611dab565b5b92915050565b6000611e1982611b8e565b9150611e2483611b8e565b9250828203905081811115611e3c57611e3b611dab565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b611e7a81611b50565b82525050565b6000606082019050611e956000830186611e71565b611ea26020830185611e71565b611eaf6040830184611d54565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000611ef182611b8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f2357611f22611dab565b5b600182019050919050565b6000604082019050611f436000830185611e71565b611f506020830184611d54565b9392505050565b600081519050611f6681611b62565b92915050565b600060208284031215611f8257611f81611b26565b5b6000611f9084828501611f57565b91505092915050565b600081905092915050565b50565b6000611fb4600083611f99565b9150611fbf82611fa4565b600082019050919050565b6000611fd582611fa7565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000612026600f83611fdf565b915061203182611ff0565b602082019050919050565b6000602082019050818103600083015261205581612019565b9050919050565b60006020820190506120716000830184611e71565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120b182611b8e565b91506120bc83611b8e565b9250826120cc576120cb612077565b5b828204905092915050565b60006120e282611b8e565b91506120ed83611b8e565b92508282026120fb81611b8e565b9150828204841483151761211257612111611dab565b5b5092915050565b600060808201905061212e6000830187611e71565b61213b6020830186611e71565b6121486040830185611d54565b6121556060830184611d54565b95945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612194601f83611fdf565b915061219f8261215e565b602082019050919050565b600060208201905081810360008301526121c381612187565b9050919050565b7f4578747261206d6f6e65792072657475726e696e67206661696c656400000000600082015250565b6000612200601c83611fdf565b915061220b826121ca565b602082019050919050565b6000602082019050818103600083015261222f816121f3565b905091905056fea264697066735822122083863bb1e2f86299d6fa6c705158f6cc6ad941703f576f009e705defa2ce85d164736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Pool)268_storage)"
      },
      {
        "astId": 277,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "earned",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Pool)268_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LiquidityPool.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)268_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)268_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityPool.Pool",
        "members": [
          {
            "astId": 258,
            "contract": "contracts/LiquidityPool.sol:LiquidityPool",
            "label": "pool_creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 260,
            "contract": "contracts/LiquidityPool.sol:LiquidityPool",
            "label": "nft_adderess",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 263,
            "contract": "contracts/LiquidityPool.sol:LiquidityPool",
            "label": "nft_token_ids",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 265,
            "contract": "contracts/LiquidityPool.sol:LiquidityPool",
            "label": "eth_amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 267,
            "contract": "contracts/LiquidityPool.sol:LiquidityPool",
            "label": "released",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}