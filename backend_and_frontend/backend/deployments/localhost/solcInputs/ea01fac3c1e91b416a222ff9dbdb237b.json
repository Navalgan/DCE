{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/LiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// send NFTs\n// wait for eth\n// create pool\n// one persone gives nfts\n\nerror PriceMustBeAboveZero();\nerror NotApprovedForPool(uint256 nft_id);\nerror NotOwner();\nerror NotEnoughEth();\nerror NotEnoughNfts();\nerror AlreadyProvided();\nerror AlreadyReleased();\nerror NoIncome();\nerror PriceMustBeTheSame();\n\ncontract LiquidityPool is ReentrancyGuard {\n    event PoolCreated(\n        address seller,\n        address nft_address,\n        uint256 nft_amount,\n        uint256 eth_amount\n    );\n    event PoolClosed(address nft_address);\n    event EthProvided(address nft_address, address provider);\n    event PoolPrice(address nft_address, uint256 price_per_nft);\n    event NftsBuy(address nft_address, uint256 amount);\n    event NftsSell(address nft_address, uint256 amount);\n\n    struct Pool {\n        address pool_creator;\n        address nft_adderess;\n        uint256[] nft_token_ids;\n        uint256 eth_amount;\n        bool released;\n    }\n\n    mapping(address => Pool) private pools;\n    mapping(address => uint256) private earned;\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////// Modifiers ///////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    modifier isApproved(address nft_address, uint256[] calldata nft_token_ids) {\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\n            if (\n                IERC721(nft_address).getApproved(nft_token_ids[i]) !=\n                address(this)\n            ) {\n                revert NotApprovedForPool(nft_token_ids[i]);\n            }\n        }\n        _;\n    }\n\n    modifier isOwned(\n        address nft_address,\n        uint256[] calldata nft_token_ids,\n        address spender\n    ) {\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\n            if (IERC721(nft_address).ownerOf(nft_token_ids[i]) != spender) {\n                revert NotOwner();\n            }\n        }\n        _;\n    }\n\n    modifier isReleased(address nft_address) {\n        if (!pools[nft_address].released) {\n            revert AlreadyReleased();\n        }\n        _;\n    }\n\n    modifier notReleased(address nft_address) {\n        if (pools[nft_address].released) {\n            revert AlreadyReleased();\n        }\n        _;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////// Main Functions //////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    function CreatePool(\n        address nft_address,\n        uint256[] calldata nft_token_ids\n    )\n        external\n        payable\n        nonReentrant\n        notReleased(nft_address)\n        isApproved(nft_address, nft_token_ids)\n        isOwned(nft_address, nft_token_ids, msg.sender)\n    {\n        if (msg.value <= 0 || msg.value / nft_token_ids.length == 0) {\n            revert PriceMustBeAboveZero();\n        }\n        if (\n            (msg.value / nft_token_ids.length) * nft_token_ids.length !=\n            msg.value\n        ) {\n            revert PriceMustBeTheSame();\n        }\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\n            IERC721(nft_address).safeTransferFrom(\n                msg.sender,\n                address(this),\n                nft_token_ids[i]\n            );\n        }\n        pools[nft_address] = Pool(\n            msg.sender,\n            nft_address,\n            nft_token_ids,\n            msg.value,\n            true\n        );\n        emit PoolCreated(\n            msg.sender,\n            nft_address,\n            nft_token_ids.length,\n            msg.value\n        );\n    }\n\n    function ClosePool(\n        address nft_address\n    ) external nonReentrant isReleased(nft_address) {\n        delete pools[nft_address];\n        for (uint256 i = 0; i < pools[nft_address].nft_token_ids.length; i++) {\n            IERC721(nft_address).safeTransferFrom(\n                address(this),\n                msg.sender,\n                pools[nft_address].nft_token_ids[i]\n            );\n        }\n        (bool success, ) = payable(msg.sender).call{\n            value: pools[nft_address].eth_amount\n        }(\"\");\n        require(success, \"Transfer failed\");\n        emit PoolClosed(nft_address);\n    }\n\n    function BuyNfts(\n        address nft_address,\n        uint256 amount\n    ) external payable nonReentrant isReleased(nft_address) {\n        uint256 price = RecalculatePrice(nft_address, amount, true);\n        if (msg.value < price + totalCommission(price)) {\n            revert NotEnoughEth();\n        }\n        returnExtraMoney(msg.sender, price + totalCommission(price), msg.value);\n        pools[nft_address].eth_amount += price;\n        for (uint256 i = 0; i < amount; i++) {\n            uint256 len = pools[nft_address].nft_token_ids.length - 1;\n            IERC721(nft_address).safeTransferFrom(\n                address(this),\n                msg.sender,\n                pools[nft_address].nft_token_ids[len]\n            );\n            pools[nft_address].nft_token_ids.pop();\n        }\n        pools[nft_address].eth_amount += price;\n\n        sendCommision(pools[nft_address].pool_creator, price);\n        emit NftsBuy(nft_address, amount);\n    }\n\n    function SellNfts(\n        address nft_address,\n        uint256[] calldata nft_token_ids\n    )\n        external\n        payable\n        nonReentrant\n        isReleased(nft_address)\n        isApproved(nft_address, nft_token_ids)\n        isOwned(nft_address, nft_token_ids, msg.sender)\n    {\n        uint256 price = RecalculatePrice(\n            nft_address,\n            nft_token_ids.length,\n            false\n        );\n        if (msg.value < totalCommission(price)) {\n            revert NotEnoughEth();\n        }\n        returnExtraMoney(msg.sender, totalCommission(price), msg.value);\n\n        for (uint256 i = 0; i < nft_token_ids.length; i++) {\n            IERC721(nft_address).safeTransferFrom(\n                msg.sender,\n                address(this),\n                nft_token_ids[i]\n            );\n            pools[nft_address].nft_token_ids.push(nft_token_ids[i]);\n        }\n        (bool success, ) = payable(msg.sender).call{value: price}(\"\");\n        require(success, \"Transfer failed\");\n        sendCommision(pools[nft_address].pool_creator, price);\n        emit NftsSell(nft_address, nft_token_ids.length);\n    }\n\n    function withdrawProceeds() external nonReentrant {\n        uint256 income = earned[msg.sender];\n        if (income <= 0) {\n            revert NoIncome();\n        }\n        earned[msg.sender] = 0;\n        (bool success, ) = payable(msg.sender).call{value: income}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function getBalance(address user) external view returns (uint256) {\n        return earned[user];\n    }\n\n    function getPrice(\n        address nft_address,\n        uint256 amount,\n        bool buy\n    ) external view returns (uint256) {\n        uint256 price = RecalculatePrice(nft_address, amount, buy);\n        return price + totalCommission(price);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////// Help Functions //////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////////\n\n    function RecalculatePrice(\n        address nft_address,\n        uint256 dn,\n        bool buy\n    ) private view returns (uint256) {\n        uint256 n = pools[nft_address].nft_token_ids.length;\n        uint256 k = pools[nft_address].eth_amount;\n        if (buy) {\n            return (k * dn) / (n - dn);\n        }\n        return (k * dn) / (n + dn);\n    }\n\n    function totalCommission(\n        uint256 total_price\n    ) private pure returns (uint256) {\n        return total_price / 400;\n    }\n\n    function poolCommission(\n        uint256 total_price\n    ) private pure returns (uint256) {\n        return totalCommission(total_price) / 2;\n    }\n\n    function returnExtraMoney(\n        address sender,\n        uint256 required,\n        uint256 got\n    ) private nonReentrant {\n        if (got > required) {\n            (bool success, ) = payable(sender).call{value: got - required}(\"\");\n            require(success, \"Extra money returning failed\");\n        }\n    }\n\n    function sendCommision(address pool_creator, uint256 price) private {\n        earned[pool_creator] += poolCommission(price);\n        earned[address(this)] += totalCommission(price) - poolCommission(price);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}